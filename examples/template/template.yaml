apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: example-custom-application-workbench
  title: Custom Application Workbench
  description: |
    The Custom Application Workbench is a self-service framework empowering researchers and developers to rapidly build, deploy, and manage secure, compliant apps across cloud and on-prem environments.

    **Details what this template will do:**
    - You start by entering the app details  
    - Scaffolded project using approved, secure templates  
    - It sets up pipelines with built-in governance & testing  
    - Push code to trigger automated build & deployment
spec:
  owner: imec-platform/maintainers
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Application Details
      required:
        - name
        - language
        - owner
      properties:
        name:
          title: Name repository
          type: string
          description: Name of the repository e.g. 'rnd3'
          ui:autofocus: true
          ui:options:
            rows: 5
        owner: 
          title: Owner
          type: string
          description: Owner of the repository
          enum:
            - imec-platform/maintainers
            - StephanieAE
          ui:order:
            - owner
          ui:options:
            owner:
              ui:widget: select
            
        language:
          title: Programming Language
          type: string
          default: Python
          description: Choose the programming language for the application
          enum:
            - Python
            - Typescript
            - .NET
          ui:order:
            - language
          ui:options:
            ui:widget: select
            
      dependencies:
        language:
          oneOf:
            - properties:
                language:
                  enum:
                    - Typescript
                framework:
                  type: string
                  title: Framework
                  enum:
                    - React
                  default: React
              required:
                - framework
            - properties:
                language:
                  enum:
                    - Python
                framework:
                  type: string
                  title: Framework
                  enum:
                    - None
                    - Dash
                    - Flask
                    - Streamlit
                  default: None
              required:
                - framework
            - properties:
                language:
                  enum:
                    - .NET
                framework:
                  type: string
                  title: Framework
                  enum:
                    - ASP .NET Core
                  default: ASP .NET Core
              required:
                - framework


    - title: Application Deployment
      required:
        - deploymentApplication
        - deploymentEnvironments
      properties:
        deploymentApplication:
          title: Deployment target
          type: string
          default: Azure Web App
          description: Choose a what type application or platform you want to deploy
          enum:
            - Azure Kubernetes Service
            - Azure Functions
            - Azure Web App
            - Azure Container Apps
          ui:order:
            - deploymentApplication
          ui:options:
            language:
              ui:widget: select
        deploymentEnvironments:
          title: Deployment Environments
          description: Select the environments where this will be deployed. "prod" is always required.
          type: array
          items:
            type: string
            enum:
              - dev
              - test
              - qa
              - prod
          uniqueItems: true
          default: [prod]
          allOf:
            - contains:
                const: prod
          ui:options:
            widget: checkboxes

    - title: Additional Resources
      properties:
        databases:
          title: Databases
          type: array
          description: Select extra databases you want to deploy with your application
          items:
            type: string
            enum:
              - Azure SQL
              - Azure Databricks
              - Azure PostgreSQL
              - Azure Cosmos DB
          ui:order:
            - databases
          ui:options:
            language:
              ui:widget: select
        ai:
          title: AI
          type: array
          description: Select extra AI services you want to deploy with your application
          items:
            type: string
            enum:
              - Azure AI Foundry
              - Azure AI Services
          ui:order:
            - ai
          ui:options:
            language:
              ui:widget: select

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./skeleton
        values:
          name: ${{ parameters.name }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        repoUrl: github.com?owner=${{ parameters.owner }}&repo=${{ parameters.name }}
        # Change TOKEN
        token: ${{ config('scaffolder.github.token') }}
        repoVisibility: public
        defaultBranch: main
        description: Repository Created by Demo Template


  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
